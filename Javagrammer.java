/* Generated By:JavaCC: Do not edit this line. Javagrammer.java */
import syntaxtree.*;
import java.util.Vector;


public class Javagrammer implements JavagrammerConstants {

  static final public Goal Goal() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Statement n1;
   NodeToken n2;
   Token n3;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQPAREN:
      case RSQPAREN:
      case LBRACE:
      case RBRACE:
      case SEMICOLON:
      case DOT:
      case ASSIGN:
      case LE:
      case NE:
      case PLUS:
      case FLOAT:
      case MINUS:
      case MULT:
      case DIV:
      case AND:
      case OR:
      case NOT:
      case BOOLEAN:
      case PACKAGE:
      case IMPORT:
      case CLASS:
      case INTERFACE:
      case ELSE:
      case EXTENDS:
      case FALSE:
      case IF:
      case WHILE:
      case INTEGER:
      case MAIN:
      case NEW:
      case PUBLIC:
      case RETURN:
      case STATIC:
      case STRING:
      case THIS:
      case TRUE:
      case PRINT:
      case VOID:
      case DEFINE:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = Statement();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Goal(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   PackageDeclaration n1;
   ImportStatement n2;
   OtherStatement n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      n1 = PackageDeclaration();
        n0 = new NodeChoice(n1, 0);
      break;
    case IMPORT:
      n2 = ImportStatement();
        n0 = new NodeChoice(n2, 1);
      break;
    case LSQPAREN:
    case RSQPAREN:
    case LBRACE:
    case RBRACE:
    case SEMICOLON:
    case DOT:
    case ASSIGN:
    case LE:
    case NE:
    case PLUS:
    case FLOAT:
    case MINUS:
    case MULT:
    case DIV:
    case AND:
    case OR:
    case NOT:
    case BOOLEAN:
    case CLASS:
    case INTERFACE:
    case ELSE:
    case EXTENDS:
    case FALSE:
    case IF:
    case WHILE:
    case INTEGER:
    case MAIN:
    case NEW:
    case PUBLIC:
    case RETURN:
    case STATIC:
    case STRING:
    case THIS:
    case TRUE:
    case PRINT:
    case VOID:
    case DEFINE:
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      n3 = OtherStatement();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PackageDeclaration PackageDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   DotIdentifier n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(PACKAGE);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = DotIdentifier();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new PackageDeclaration(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ImportStatement ImportStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   DotIdentifier n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(IMPORT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = DotIdentifier();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ImportStatement(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIdentifier DotIdentifier() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   RemainingIdentifier n3;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n3 = RemainingIdentifier();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new DotIdentifier(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RemainingIdentifier RemainingIdentifier() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Asterisk n4;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n3 = Identifier();
           n2 = new NodeChoice(n3, 0);
      break;
    case MULT:
      n4 = Asterisk();
           n2 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RemainingIdentifier(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Asterisk Asterisk() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(MULT);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Asterisk(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public OtherStatement OtherStatement() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQPAREN:
      n2 = jj_consume_token(LSQPAREN);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case RSQPAREN:
      n4 = jj_consume_token(RSQPAREN);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case LBRACE:
      n6 = jj_consume_token(LBRACE);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case RBRACE:
      n8 = jj_consume_token(RBRACE);
               n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case SEMICOLON:
      n10 = jj_consume_token(SEMICOLON);
                n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case DOT:
      n12 = jj_consume_token(DOT);
                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case ASSIGN:
      n14 = jj_consume_token(ASSIGN);
                n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case LE:
      n16 = jj_consume_token(LE);
                 n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case NE:
      n18 = jj_consume_token(NE);
                 n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case PLUS:
      n20 = jj_consume_token(PLUS);
                n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case FLOAT:
      n22 = jj_consume_token(FLOAT);
                    n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case MINUS:
      n24 = jj_consume_token(MINUS);
                n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case MULT:
      n26 = jj_consume_token(MULT);
                n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case DIV:
      n28 = jj_consume_token(DIV);
                n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case AND:
      n30 = jj_consume_token(AND);
                 n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case OR:
      n32 = jj_consume_token(OR);
                 n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case NOT:
      n34 = jj_consume_token(NOT);
                n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case BOOLEAN:
      n36 = jj_consume_token(BOOLEAN);
                      n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    case CLASS:
      n38 = jj_consume_token(CLASS);
                    n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
      break;
    case INTERFACE:
      n40 = jj_consume_token(INTERFACE);
                        n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
      break;
    case ELSE:
      n42 = jj_consume_token(ELSE);
                   n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
      break;
    case EXTENDS:
      n44 = jj_consume_token(EXTENDS);
                      n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
      break;
    case FALSE:
      n46 = jj_consume_token(FALSE);
                    n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
      break;
    case IF:
      n48 = jj_consume_token(IF);
                 n47 = JTBToolkit.makeNodeToken(n48);
        n0 = new NodeChoice(n47, 23);
      break;
    case WHILE:
      n50 = jj_consume_token(WHILE);
                    n49 = JTBToolkit.makeNodeToken(n50);
        n0 = new NodeChoice(n49, 24);
      break;
    case INTEGER:
      n52 = jj_consume_token(INTEGER);
                  n51 = JTBToolkit.makeNodeToken(n52);
        n0 = new NodeChoice(n51, 25);
      break;
    case MAIN:
      n54 = jj_consume_token(MAIN);
                   n53 = JTBToolkit.makeNodeToken(n54);
        n0 = new NodeChoice(n53, 26);
      break;
    case NEW:
      n56 = jj_consume_token(NEW);
                  n55 = JTBToolkit.makeNodeToken(n56);
        n0 = new NodeChoice(n55, 27);
      break;
    case PUBLIC:
      n58 = jj_consume_token(PUBLIC);
                     n57 = JTBToolkit.makeNodeToken(n58);
        n0 = new NodeChoice(n57, 28);
      break;
    case RETURN:
      n60 = jj_consume_token(RETURN);
                     n59 = JTBToolkit.makeNodeToken(n60);
        n0 = new NodeChoice(n59, 29);
      break;
    case STATIC:
      n62 = jj_consume_token(STATIC);
                     n61 = JTBToolkit.makeNodeToken(n62);
        n0 = new NodeChoice(n61, 30);
      break;
    case STRING:
      n64 = jj_consume_token(STRING);
                     n63 = JTBToolkit.makeNodeToken(n64);
        n0 = new NodeChoice(n63, 31);
      break;
    case THIS:
      n66 = jj_consume_token(THIS);
                   n65 = JTBToolkit.makeNodeToken(n66);
        n0 = new NodeChoice(n65, 32);
      break;
    case TRUE:
      n68 = jj_consume_token(TRUE);
                   n67 = JTBToolkit.makeNodeToken(n68);
        n0 = new NodeChoice(n67, 33);
      break;
    case PRINT:
      n70 = jj_consume_token(PRINT);
                                 n69 = JTBToolkit.makeNodeToken(n70);
        n0 = new NodeChoice(n69, 34);
      break;
    case VOID:
      n72 = jj_consume_token(VOID);
                   n71 = JTBToolkit.makeNodeToken(n72);
        n0 = new NodeChoice(n71, 35);
      break;
    case DEFINE:
      n74 = jj_consume_token(DEFINE);
                      n73 = JTBToolkit.makeNodeToken(n74);
        n0 = new NodeChoice(n73, 36);
      break;
    case FLOAT_LITERAL:
      n76 = jj_consume_token(FLOAT_LITERAL);
                            n75 = JTBToolkit.makeNodeToken(n76);
        n0 = new NodeChoice(n75, 37);
      break;
    case INTEGER_LITERAL:
      n78 = jj_consume_token(INTEGER_LITERAL);
                              n77 = JTBToolkit.makeNodeToken(n78);
        n0 = new NodeChoice(n77, 38);
      break;
    case IDENTIFIER:
      n80 = jj_consume_token(IDENTIFIER);
                         n79 = JTBToolkit.makeNodeToken(n80);
        n0 = new NodeChoice(n79, 39);
      break;
    case STRING_LITERAL:
      n82 = jj_consume_token(STRING_LITERAL);
                             n81 = JTBToolkit.makeNodeToken(n82);
        n0 = new NodeChoice(n81, 40);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OtherStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavagrammerTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffff800,0xfffff800,0x10000,0x800000,0x9ffff800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3fffff,0x3fffff,0x0,0x200000,0x3fffff,};
   }

  /** Constructor with InputStream. */
  public Javagrammer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Javagrammer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavagrammerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Javagrammer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JavagrammerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Javagrammer(JavagrammerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavagrammerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
