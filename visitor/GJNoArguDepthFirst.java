//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst implements GJNoArguVisitor<String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n) {
      String _ret=null;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
      }
      return _ret;
   }

   public String visit(NodeListOptional n) {
      if ( n.present() ) {
         String _ret=null;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public String visit(NodeSequence n) {
      String _ret=null;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
      }
      return _ret;
   }

   public String visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   Vector<String> solve(String frm, String imp) {
      Vector<String> v = new Vector<String>();
      int n = imp.length();
      int cnt = 0;
      String temp = "";
      if (frm == null || frm == "") {
         for(int i=0;i<n;i++) {
            if (imp.charAt(i) == ',') {
               v.insertElementAt(temp, cnt++);
               temp = "";
            } else {
               temp += imp.charAt(i);
            }
         }
         if (temp != "") {
            v.insertElementAt(temp, cnt++);
         } else {
            // TODO: consider this
            // v.insertElementAt(".", cnt++);
         }
      } else {
         for(int i=0;i<n;i++) {
            if (imp.charAt(i) == ',') {
               if (temp != "") {
                  v.insertElementAt(frm + '.' + temp, cnt++);
               } else {
                  v.insertElementAt(frm, cnt++);
               }
               temp = "";
            } else {
               temp += imp.charAt(i);
            }
         }
         if (temp != "") {
            v.insertElementAt(frm + "." + temp, cnt++);
         } else {
            v.insertElementAt(frm,cnt++);
         }
      }
      return v;   
   }

   /**
    * f0 -> ( Statement() )*
    * f1 -> <EOF>
    */
   public String visit(Goal n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> PackageDeclaration()
    *       | StaticImportStatement()
    *       | ImportStatement()
    *       | OtherStatement()
    */
   public String visit(Statement n) {
      String _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "package"
    * f1 -> DotIdentifier()
    * f2 -> ";"
    */
   public String visit(PackageDeclaration n) {
      String temp = n.f1.accept(this);
      System.out.println(temp);
      return null;
   }

   /**
    * f0 -> "import"
    * f1 -> "static"
    * f2 -> DotIdentifier()
    * f3 -> ";"
    */
   public String visit(StaticImportStatement n) {
      String temp = n.f2.accept(this);
      System.out.println(temp);
      return null;
   }

   /**
    * f0 -> "import"
    * f1 -> DotIdentifier()
    * f2 -> ";"
    */
   public String visit(ImportStatement n) {
      String temp = n.f1.accept(this);
      System.out.println(temp);
      return null;
   }

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ( RemainingIdentifier() )*
    */
   public String visit(DotIdentifier n) {
      String str = n.f0.tokenImage;
      NodeListOptional nodeListOptional = (NodeListOptional) n.f1;
      for (Node x:nodeListOptional.nodes) {
         RemainingIdentifier remainingIdentifier = (RemainingIdentifier) x;
         String temp = remainingIdentifier.accept(this);
         str += temp;
      }
      return str;
   }

   /**
    * f0 -> "."
    * f1 -> ( Identifier() | Asterisk() )
    */
   public String visit(RemainingIdentifier n) {
      Node node =  n.f1.choice;
      if (node instanceof Identifier) {
         return n.f0.tokenImage + n.f1.accept(this);
      } 
      return "";
   }

   /**
    * f0 -> <MULT>
    */
   public String visit(Asterisk n) {
      return n.f0.tokenImage;
   }

   /**
    * f0 -> "["
    *       | "]"
    *       | "{"
    *       | "}"
    *       | ";"
    *       | "."
    *       | "="
    *       | ">"
    *       | ">="
    *       | "<"
    *       | "<="
    *       | "!="
    *       | "+"
    *       | "float"
    *       | "-"
    *       | "*"
    *       | "/"
    *       | "&&"
    *       | "||"
    *       | "!"
    *       | "boolean"
    *       | "class"
    *       | "interface"
    *       | "else"
    *       | "extends"
    *       | "false"
    *       | "if"
    *       | "while"
    *       | "int"
    *       | "main"
    *       | "new"
    *       | "public"
    *       | "return"
    *       | "static"
    *       | "String"
    *       | "this"
    *       | "true"
    *       | "System.out.println"
    *       | <VOID>
    *       | <FLOAT_LITERAL>
    *       | <INTEGER_LITERAL>
    *       | <IDENTIFIER>
    *       | <STRING_LITERAL>
    *       | <OBJECT>
    */
   public String visit(OtherStatement n) {
      String _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n) {
      return n.f0.tokenImage;
   }

}
