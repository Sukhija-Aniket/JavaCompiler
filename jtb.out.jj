//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Javagrammer)
import syntaxtree.*;
import java.util.Vector;


public class Javagrammer 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(Javagrammer)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <AT: "@">
   | <QUOTE: "'">
   | <SEMICOLON: ";">
   | <DOT: ".">
   | <COMMA: ",">
   | <ASSIGN: "=">
   | <LESS: "<">
   | <GREATER: ">">
   | <LE: "<=">
   | <GE: ">=">
   | <NE: "!=">
   | <PLUS: "+">
   | <FLOAT: "float">
   | <MINUS: "-">
   | <MULT: "*">
   | <DIV: "/">
   | <AND: "&&">
   | <OR: "||">
   | <PIPE: "|">
   | <BIT_AND: "&">
   | <NOT: "!">
   | <BOOLEAN: "boolean">
   | <PACKAGE: "package">
   | <IMPORT: "import">
   | <CLASS: "class">
   | <INTERFACE: "interface">
   | <ELSE: "else">
   | <EXTENDS: "extends">
   | <FALSE: "false">
   | <IF: "if">
   | <WHILE: "while">
   | <INTEGER: "int">
   | <MAIN: "main">
   | <NEW: "new">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <STRING: "String">
   | <THIS: "this">
   | <TRUE: "true">
   | <PRINT: "System.out.println">
   | <VOID: "void">
   | <OBJECT: "Object">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
   | <FLOAT_LITERAL: <INTEGER_LITERAL> <DOT> ((["0"-"9"])* ["1"-"9"])>
   | <STRING_LITERAL: "\"" (~["\"", "\\"] | "\\\"" | "\\\\" | "\\n" | "\\t" | "\\f" | "\\r" | "\\" ~[])* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   Statement n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=Statement()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Goal(n0,n2); }
}

Statement Statement() :
{
   NodeChoice n0;
   PackageDeclaration n1;
   StaticImportStatement n2;
   ImportStatement n3;
   OtherStatement n4;

   
}
{
   (
      LOOKAHEAD("package")
      n1=PackageDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD("import static")
      n2=StaticImportStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD("import")
      n3=ImportStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=OtherStatement()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Statement(n0); }
}

PackageDeclaration PackageDeclaration() :
{
   NodeToken n0;
   Token n1;
   DotIdentifier n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="package" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DotIdentifier()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new PackageDeclaration(n0,n2,n3); }
}

StaticImportStatement StaticImportStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   DotIdentifier n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="import" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="static" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=DotIdentifier()
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new StaticImportStatement(n0,n2,n4,n5); }
}

ImportStatement ImportStatement() :
{
   NodeToken n0;
   Token n1;
   DotIdentifier n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="import" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DotIdentifier()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ImportStatement(n0,n2,n3); }
}

DotIdentifier DotIdentifier() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   RemainingIdentifier n3;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(RemainingIdentifier())
      n3=RemainingIdentifier()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new DotIdentifier(n0,n2); }
}

RemainingIdentifier RemainingIdentifier() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Asterisk n4;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Asterisk()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new RemainingIdentifier(n0,n2); }
}

Asterisk Asterisk() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<MULT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Asterisk(n0); }
}

OtherStatement OtherStatement() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeToken n93;
   Token n94;
   NodeToken n95;
   Token n96;
   NodeToken n97;
   Token n98;
   NodeToken n99;
   Token n100;
   NodeToken n101;
   Token n102;

   
}
{
   (
      n2=<LPAREN> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<RPAREN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LSQPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<RSQPAREN> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LBRACE> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<RBRACE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<AT> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<QUOTE> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<SEMICOLON> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<DOT> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<COMMA> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<ASSIGN> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<GREATER> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28=<GE> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30=<LESS> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32=<LE> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34=<NE> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36=<PLUS> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38=<FLOAT> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40=<MINUS> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42=<MULT> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44=<DIV> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46=<AND> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48=<OR> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50=<PIPE> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52=<BIT_AND> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54=<NOT> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56=<BOOLEAN> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58=<CLASS> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60=<INTERFACE> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62=<ELSE> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   |
      n64=<EXTENDS> { n63 = JTBToolkit.makeNodeToken(n64); }
      { n0 = new NodeChoice(n63, 31); }
   |
      n66=<FALSE> { n65 = JTBToolkit.makeNodeToken(n66); }
      { n0 = new NodeChoice(n65, 32); }
   |
      n68=<IF> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n0 = new NodeChoice(n67, 33); }
   |
      n70=<WHILE> { n69 = JTBToolkit.makeNodeToken(n70); }
      { n0 = new NodeChoice(n69, 34); }
   |
      n72=<INTEGER> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n0 = new NodeChoice(n71, 35); }
   |
      n74=<MAIN> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n0 = new NodeChoice(n73, 36); }
   |
      n76=<NEW> { n75 = JTBToolkit.makeNodeToken(n76); }
      { n0 = new NodeChoice(n75, 37); }
   |
      n78=<PUBLIC> { n77 = JTBToolkit.makeNodeToken(n78); }
      { n0 = new NodeChoice(n77, 38); }
   |
      n80=<RETURN> { n79 = JTBToolkit.makeNodeToken(n80); }
      { n0 = new NodeChoice(n79, 39); }
   |
      n82=<STATIC> { n81 = JTBToolkit.makeNodeToken(n82); }
      { n0 = new NodeChoice(n81, 40); }
   |
      n84=<STRING> { n83 = JTBToolkit.makeNodeToken(n84); }
      { n0 = new NodeChoice(n83, 41); }
   |
      n86=<THIS> { n85 = JTBToolkit.makeNodeToken(n86); }
      { n0 = new NodeChoice(n85, 42); }
   |
      n88=<TRUE> { n87 = JTBToolkit.makeNodeToken(n88); }
      { n0 = new NodeChoice(n87, 43); }
   |
      n90=<PRINT> { n89 = JTBToolkit.makeNodeToken(n90); }
      { n0 = new NodeChoice(n89, 44); }
   |
      n92=<VOID> { n91 = JTBToolkit.makeNodeToken(n92); }
      { n0 = new NodeChoice(n91, 45); }
   |
      n94=<OBJECT> { n93 = JTBToolkit.makeNodeToken(n94); }
      { n0 = new NodeChoice(n93, 46); }
   |
      n96=<INTEGER_LITERAL> { n95 = JTBToolkit.makeNodeToken(n96); }
      { n0 = new NodeChoice(n95, 47); }
   |
      n98=<FLOAT_LITERAL> { n97 = JTBToolkit.makeNodeToken(n98); }
      { n0 = new NodeChoice(n97, 48); }
   |
      n100=<STRING_LITERAL> { n99 = JTBToolkit.makeNodeToken(n100); }
      { n0 = new NodeChoice(n99, 49); }
   |
      n102=<IDENTIFIER> { n101 = JTBToolkit.makeNodeToken(n102); }
      { n0 = new NodeChoice(n101, 50); }
   )
   
   { return new OtherStatement(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}
