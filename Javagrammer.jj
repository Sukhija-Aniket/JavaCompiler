options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Javagrammer)
  public class Javagrammer {}
PARSER_END(Javagrammer)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < AT: "@" >
| < QUOTE: "'" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < COMMA: "," >
| < ASSIGN: "=" >
| < LESS: "<" >
| < GREATER: ">" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < PLUS: "+" >
| < FLOAT: "float" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < AND : "&&" >
| < OR : "||" >
| < PIPE: "|" >
| < BIT_AND: "&" >
| < NOT : "!" >
| < BOOLEAN: "boolean" >
| < PACKAGE: "package" >
| < IMPORT: "import" >
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >
| < OBJECT: "Object" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
| < FLOAT_LITERAL: <INTEGER_LITERAL> <DOT> ( (["0"-"9"])* ["1"-"9"] ) >
| <STRING_LITERAL: "\"" (~["\"", "\\"] | "\\\"" | "\\\\" | "\\n" | "\\t" | "\\f" | "\\r" | "\\" ~[] )* "\"" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/*************************************
 * The Javagrammer Grammar Starts Here *
 *************************************/

void Goal() :
{}
{
   ( Statement() )*
   <EOF>
}

void Statement() :
{}
{
  LOOKAHEAD("package") PackageDeclaration()
|
  LOOKAHEAD("import static") StaticImportStatement()
|
  LOOKAHEAD("import") ImportStatement()
|
  OtherStatement()
}

void PackageDeclaration() :
{}
{
  "package" DotIdentifier() ";"
}

void StaticImportStatement() :
{}
{
    "import" "static" DotIdentifier() ";"
}

void ImportStatement() :
{}
{
  "import" DotIdentifier() ";"
}

void DotIdentifier() :
{}
{
  <IDENTIFIER> (LOOKAHEAD(RemainingIdentifier()) RemainingIdentifier() )*
}

void RemainingIdentifier() :
{}
{
 "." ( Identifier() | Asterisk() )
}

void Asterisk() :
{}
{
 <MULT>
}


void OtherStatement() :
{}
{
  <LPAREN>
  | <RPAREN>
  | <LSQPAREN>
  | <RSQPAREN>
  | <LBRACE>
  | <RBRACE>
  | <AT>
  | <QUOTE>
  | <SEMICOLON>
  | <DOT>
  | <COMMA>
  | <ASSIGN>
  | <GREATER>
  | <GE>
  | <LESS>
  | <LE>
  | <NE>
  | <PLUS>
  | <FLOAT>
  | <MINUS>
  | <MULT>
  | <DIV>
  | <AND>
  | <OR>
  | <PIPE>
  | <BIT_AND>
  | <NOT>
  | <BOOLEAN>
  | <CLASS>
  | <INTERFACE>
  | <ELSE>
  | <EXTENDS>
  | <FALSE>
  | <IF>
  | <WHILE>
  | <INTEGER>
  | <MAIN>
  | <NEW>
  | <PUBLIC>
  | <RETURN>
  | <STATIC>
  | <STRING>
  | <THIS>
  | <TRUE>
  | <PRINT>
  | <VOID>
  | <OBJECT>
  | <INTEGER_LITERAL>
  | <FLOAT_LITERAL>
  | <STRING_LITERAL>
  | <IDENTIFIER>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}


